package fakeBrains;

import java.awt.geom.*;
import java.util.*;

import problem.*;
import visualDebugger.VisualHelper;

public class Assignment1 {

	public static void main(String[] args) {
		ProblemSpec problem = new ProblemSpec();
		try {
			problem.loadProblem("testcases/7ASV.txt");
		} catch (Exception x) {
			System.out.println("The file failed to load. Make sure it was legit");
		}
		PRMGraph prm = new PRMGraph(problem.getObstacles(), 0.09, 1500);
		
		VisualHelper visualHelper = new VisualHelper();
		visualHelper.addPoints(prm.getPoints());
		visualHelper.addLines(getNodeNetwork(prm.getNodes()));
		visualHelper.addRectangles(Ob2Rec(problem.getObstacles()));
		visualHelper.repaint();
		
	}
	
	
	private static List<Rectangle2D> Ob2Rec(List<Obstacle> o){
		List<Rectangle2D> rects = new ArrayList<Rectangle2D>();
		for(int i = 0; i < o.size(); i++){
			rects.add(o.get(i).getRect());
		}
		return rects;
	}
	
	private static List<Line2D> getNodeNetwork(List<Node> n){
		List<Line2D> lines = new ArrayList<Line2D>();
		Node tempNode; Edge tempEdge;
		for(int i = 0; i < n.size(); i++){
			tempNode = n.get(i); // make a temp Node
			for(int e = 0; e < n.get(i).getEdges().size(); e++){
				tempEdge = tempNode.getEdges().get(e); // Make a temp Edge
				//System.out.println(tempEdge.getLine().getX1()+", "+tempEdge.getLine().getY1());
				lines.add(tempEdge.getLine()); // Add the line made by the Edge to lines
			}
		}
		return lines;
	}
}