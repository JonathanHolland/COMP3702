package fakeBrains;

import java.util.*;
import java.awt.geom.Point2D;
import java.awt.geom.Point2D.Double;


// This is a trivial representation of a Node
// In reality for this problem a node needs to represent ALL ASV's and their
// positions
// Therefore, the variables would be the same as contained in the current
// getASVPositions()
public class Node {
	
	private Point2D.Double pos; // Position
	int nodeIndex;	int lastNode; // Counter and status value
	List<Edge> edges; // Holds teh edges
	
	/* Init from x,y */
	public Node(double x, double y){
		this.pos = new Point2D.Double(x, y); // Make the point
		edges = new ArrayList<Edge>(); // #soedgy
	}
	
	/* Init from a point */
	public Node(Point2D.Double position){
		this.pos = new Point2D.Double(position.x, position.y); // Make the Point
		edges = new ArrayList<Edge>(); // #soedgy
	}
	
	/* Init from another Node */
	public Node(Node node){
		this.edges = new ArrayList<Edge>(node.edges);
		this.pos = new Point2D.Double(node.pos.x, node.pos.y);
		this.nodeIndex = node.nodeIndex;
		this.lastNode = node.lastNode;
	}
	
	/* return the Node's position */
	public Point2D.Double getPos(){
		return new Point2D.Double(pos.x, pos.y);
	}
	
	/* Return a list of the edges of a node */
	public List<Edge> getEdges(){
		return new ArrayList<Edge>(edges);
	}
	
	/* adds an edge that terminates at node */ 
	public void addEdge(Node node){
		Edge temp = new Edge(this, node);
		edges.add(temp);
		node.edges.add(temp);
	}
	
	public void rmEdge(Edge e){
		try {
			e.getOther(this).edges.remove(e);
		} catch (Exception ex){};
		edges.remove(e);
		
	}
	
	@Override
	public boolean equals(Object o) {
		if (!(o instanceof Node)) {
			return false;
		}
		Node n = (Node) o; // the object to compare
		return (pos.equals(n.pos) && nodeIndex == n.nodeIndex) && edges.equals(n.edges);
	}
	
}
