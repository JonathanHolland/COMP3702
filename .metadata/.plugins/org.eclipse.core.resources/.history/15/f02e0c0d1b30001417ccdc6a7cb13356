package fakeBrains;

import java.util.*;
import java.awt.geom.Point2D;
import problem.*;

public class PRMGraph {
	
	// The list of nodes
	List<Node> nodes;
	// The List of Points
	List<Point2D.Double> points;
	
	public PRMGraph(){
		nodes = new ArrayList<Node>();
		points = new ArrayList<Point2D.Double>();	
	}
	
	/* Populates a space the size of mapSize with points.
	 * Converts them to nodes and connects nodes within range if they
	 * there can be a legitimate connection.
	 */
	public PRMGraph(List<Obstacle> obstacles, double range, int pointCount, Point2D.Double mapSize){
		// Init them thingos
		nodes = new ArrayList<Node>();
		points = new ArrayList<Point2D.Double>();
		setNodeIndex(0);
		
		// Make the points
		makePoints(mapSize, pointCount, obstacles);
		convertPoints2Nodes();
		connectNodes(range, obstacles);
	}
	
	public PRMGraph(List<Obstacle> obstacles, double range, int pointCount){
		this(obstacles, range, pointCount, new Point2D.Double(1.0,1.0));
	}
		
	/* Connects the nodes if the connections are valid and they are within a certain range */
	private void connectNodes(double range, List<Obstacle> obstacles){
		for(int i = 0; i < nodes.size(); i++)
			for(int k = 0; k < nodes.size(); k++){
				// For each node, check if there's a valid connection to another node nearby
				Node a = new Node(nodes.get(i)); Node b = new Node(nodes.get(k)); // don't make pointers
				// if we're not the same and the distance is good
				if(!a.equals(b) && b.getPos().distance(a.getPos()) <= range){
					// make a temp edge
					Edge edge = new Edge(a, b);
					// if the edge isn't blocked add the edge to the nodes
					if(!edge.isBlocked(obstacles)){
						nodes.get(i).addEdge(nodes.get(k));
					}
				}
			}
	}
	
	private void makePoints(Point2D.Double mapSize, int num, List<Obstacle> o){
		// Start 
		Random tempRand = new Random(); boolean badSpot;
		Random rand = new Random(tempRand.nextInt());
		for(int i=0; i < num; i++){
			badSpot = false;
			double ran1 = rand.nextDouble();
			System.out.println("Using " + ran1 + " as a seed");
			double ran2 = rand.nextDouble();
			Point2D.Double temp = new Point2D.Double((mapSize.x * ran1), (mapSize.y * ran2));
			for(int k = 0; k < o.size(); k++){
				if(o.get(k).getRect().contains(temp.x, temp.y)) badSpot = true;
			}
			if(badSpot) --i; 
			if(!badSpot) points.add(temp);
		}
		System.out.println(points.size());
	}
	
	private void convertPoints2Nodes(){
		for(int i = 0; i < points.size(); i++){
			nodes.add(new Node(points.get(i).x, points.get(i).y));
		}
	}
	
	public List<Point2D> getPoints(){
		return new ArrayList<Point2D>(points);
	}
	
	public List<Node> getNodes(){
		return new ArrayList<Node>(nodes);
	}
	
}
